// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _kernel9_HH_
#define _kernel9_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "kernel9_idxa.h"

namespace ap_rtl {

struct kernel9 : public sc_module {
    // Port declarations 11
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<11> > a_address0;
    sc_out< sc_logic > a_ce0;
    sc_out< sc_logic > a_we0;
    sc_out< sc_lv<32> > a_d0;
    sc_in< sc_lv<32> > a_q0;


    // Module declarations
    kernel9(sc_module_name name);
    SC_HAS_PROCESS(kernel9);

    ~kernel9();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    kernel9_idxa* idxa_U;
    kernel9_idxa* val_U;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > i_0_reg_108;
    sc_signal< sc_lv<8> > i_0_reg_108_pp0_iter1_reg;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter5;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<8> > i_0_reg_108_pp0_iter2_reg;
    sc_signal< sc_lv<32> > x_0_reg_120;
    sc_signal< sc_lv<8> > i1_0_reg_132;
    sc_signal< sc_lv<1> > icmp_ln7_fu_143_p2;
    sc_signal< sc_lv<1> > icmp_ln7_reg_211;
    sc_signal< sc_lv<1> > icmp_ln7_reg_211_pp0_iter1_reg;
    sc_signal< sc_lv<1> > icmp_ln7_reg_211_pp0_iter2_reg;
    sc_signal< sc_lv<1> > icmp_ln7_reg_211_pp0_iter3_reg;
    sc_signal< sc_lv<1> > icmp_ln7_reg_211_pp0_iter4_reg;
    sc_signal< sc_lv<8> > i_fu_149_p2;
    sc_signal< sc_lv<8> > i_reg_215;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<64> > zext_ln10_fu_155_p1;
    sc_signal< sc_lv<64> > zext_ln10_reg_220;
    sc_signal< sc_lv<64> > zext_ln10_reg_220_pp0_iter1_reg;
    sc_signal< sc_lv<64> > zext_ln10_reg_220_pp0_iter2_reg;
    sc_signal< sc_lv<64> > zext_ln10_reg_220_pp0_iter3_reg;
    sc_signal< sc_lv<64> > zext_ln10_reg_220_pp0_iter4_reg;
    sc_signal< sc_lv<32> > x_fu_160_p2;
    sc_signal< sc_lv<32> > x_reg_231;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<32> > x_reg_231_pp0_iter2_reg;
    sc_signal< sc_lv<32> > mul_ln11_1_fu_167_p2;
    sc_signal< sc_lv<32> > mul_ln11_1_reg_240;
    sc_signal< sc_lv<32> > mul_ln11_fu_175_p2;
    sc_signal< sc_lv<32> > mul_ln11_reg_245;
    sc_signal< sc_lv<32> > mul_ln11_2_fu_180_p2;
    sc_signal< sc_lv<32> > mul_ln11_2_reg_250;
    sc_signal< sc_lv<32> > idx_fu_184_p2;
    sc_signal< sc_lv<32> > idx_reg_255;
    sc_signal< sc_lv<1> > icmp_ln17_fu_188_p2;
    sc_signal< sc_lv<1> > icmp_ln17_reg_260;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< bool > ap_block_state9_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state10_pp1_stage0_iter1;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<8> > i_1_fu_194_p2;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state9;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< sc_lv<7> > idxa_address0;
    sc_signal< sc_logic > idxa_ce0;
    sc_signal< sc_logic > idxa_we0;
    sc_signal< sc_lv<32> > idxa_q0;
    sc_signal< sc_lv<7> > val_address0;
    sc_signal< sc_logic > val_ce0;
    sc_signal< sc_logic > val_we0;
    sc_signal< sc_lv<32> > val_d0;
    sc_signal< sc_lv<32> > val_q0;
    sc_signal< sc_lv<8> > ap_phi_mux_i_0_phi_fu_112_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<32> > ap_phi_mux_x_0_phi_fu_124_p4;
    sc_signal< sc_lv<64> > zext_ln20_fu_200_p1;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<64> > sext_ln20_fu_206_p1;
    sc_signal< sc_lv<8> > mul_ln11_fu_175_p0;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    sc_signal< sc_lv<32> > mul_ln11_fu_175_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_pp0_stage0;
    static const sc_lv<5> ap_ST_fsm_state8;
    static const sc_lv<5> ap_ST_fsm_pp1_stage0;
    static const sc_lv<5> ap_ST_fsm_state11;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<8> ap_const_lv8_80;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<32> ap_const_lv32_4;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_a_address0();
    void thread_a_ce0();
    void thread_a_d0();
    void thread_a_we0();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_state10_pp1_stage0_iter1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_block_state7_pp0_stage0_iter5();
    void thread_ap_block_state9_pp1_stage0_iter0();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_condition_pp1_exit_iter0_state9();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_pp1();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp1();
    void thread_ap_phi_mux_i_0_phi_fu_112_p4();
    void thread_ap_phi_mux_x_0_phi_fu_124_p4();
    void thread_ap_ready();
    void thread_i_1_fu_194_p2();
    void thread_i_fu_149_p2();
    void thread_icmp_ln17_fu_188_p2();
    void thread_icmp_ln7_fu_143_p2();
    void thread_idx_fu_184_p2();
    void thread_idxa_address0();
    void thread_idxa_ce0();
    void thread_idxa_we0();
    void thread_mul_ln11_1_fu_167_p2();
    void thread_mul_ln11_2_fu_180_p2();
    void thread_mul_ln11_fu_175_p0();
    void thread_mul_ln11_fu_175_p00();
    void thread_mul_ln11_fu_175_p2();
    void thread_sext_ln20_fu_206_p1();
    void thread_val_address0();
    void thread_val_ce0();
    void thread_val_d0();
    void thread_val_we0();
    void thread_x_fu_160_p2();
    void thread_zext_ln10_fu_155_p1();
    void thread_zext_ln20_fu_200_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
