// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kernel7,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.717000,HLS_SYN_LAT=2103,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=4,HLS_SYN_FF=1009,HLS_SYN_LUT=1070,HLS_VERSION=2019_1}" *)

module kernel7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        array1_address0,
        array1_ce0,
        array1_q0,
        array2_address0,
        array2_ce0,
        array2_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 37'd1;
parameter    ap_ST_fsm_state2 = 37'd2;
parameter    ap_ST_fsm_pp0_stage0 = 37'd4;
parameter    ap_ST_fsm_state17 = 37'd8;
parameter    ap_ST_fsm_state18 = 37'd16;
parameter    ap_ST_fsm_state19 = 37'd32;
parameter    ap_ST_fsm_state20 = 37'd64;
parameter    ap_ST_fsm_state21 = 37'd128;
parameter    ap_ST_fsm_state22 = 37'd256;
parameter    ap_ST_fsm_state23 = 37'd512;
parameter    ap_ST_fsm_state24 = 37'd1024;
parameter    ap_ST_fsm_state25 = 37'd2048;
parameter    ap_ST_fsm_state26 = 37'd4096;
parameter    ap_ST_fsm_state27 = 37'd8192;
parameter    ap_ST_fsm_state28 = 37'd16384;
parameter    ap_ST_fsm_state29 = 37'd32768;
parameter    ap_ST_fsm_state30 = 37'd65536;
parameter    ap_ST_fsm_state31 = 37'd131072;
parameter    ap_ST_fsm_state32 = 37'd262144;
parameter    ap_ST_fsm_state33 = 37'd524288;
parameter    ap_ST_fsm_state34 = 37'd1048576;
parameter    ap_ST_fsm_state35 = 37'd2097152;
parameter    ap_ST_fsm_state36 = 37'd4194304;
parameter    ap_ST_fsm_state37 = 37'd8388608;
parameter    ap_ST_fsm_state38 = 37'd16777216;
parameter    ap_ST_fsm_state39 = 37'd33554432;
parameter    ap_ST_fsm_state40 = 37'd67108864;
parameter    ap_ST_fsm_state41 = 37'd134217728;
parameter    ap_ST_fsm_state42 = 37'd268435456;
parameter    ap_ST_fsm_state43 = 37'd536870912;
parameter    ap_ST_fsm_state44 = 37'd1073741824;
parameter    ap_ST_fsm_state45 = 37'd2147483648;
parameter    ap_ST_fsm_state46 = 37'd4294967296;
parameter    ap_ST_fsm_state47 = 37'd8589934592;
parameter    ap_ST_fsm_state48 = 37'd17179869184;
parameter    ap_ST_fsm_state49 = 37'd34359738368;
parameter    ap_ST_fsm_state50 = 37'd68719476736;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] array1_address0;
output   array1_ce0;
input  [31:0] array1_q0;
output  [10:0] array2_address0;
output   array2_ce0;
input  [31:0] array2_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg array1_ce0;
reg array2_ce0;

(* fsm_encoding = "none" *) reg   [36:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [11:0] i_0_reg_203;
wire   [31:0] grp_fu_214_p2;
reg   [31:0] reg_228;
reg    ap_enable_reg_pp0_iter5;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_state9_pp0_stage0_iter6;
wire    ap_block_state10_pp0_stage0_iter7;
wire    ap_block_state11_pp0_stage0_iter8;
wire    ap_block_state12_pp0_stage0_iter9;
wire    ap_block_state13_pp0_stage0_iter10;
wire    ap_block_state14_pp0_stage0_iter11;
wire    ap_block_state15_pp0_stage0_iter12;
wire    ap_block_state16_pp0_stage0_iter13;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] reg_228_pp0_iter6_reg;
reg   [31:0] reg_228_pp0_iter7_reg;
reg   [31:0] reg_228_pp0_iter8_reg;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state46;
wire   [31:0] ps_q0;
reg   [31:0] reg_235;
reg    ap_enable_reg_pp0_iter8;
reg   [0:0] and_ln12_reg_371;
wire   [31:0] ps_q1;
wire    ap_CS_fsm_state18;
wire   [2:0] add_ln5_fu_243_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln5_fu_254_p2;
wire   [0:0] icmp_ln8_fu_260_p2;
wire    ap_CS_fsm_pp0_stage0;
wire   [11:0] i_fu_266_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] idx_fu_272_p1;
reg   [2:0] idx_reg_346;
reg   [2:0] idx_reg_346_pp0_iter1_reg;
reg   [2:0] idx_reg_346_pp0_iter2_reg;
reg   [2:0] idx_reg_346_pp0_iter3_reg;
reg   [2:0] idx_reg_346_pp0_iter4_reg;
reg   [2:0] idx_reg_346_pp0_iter5_reg;
reg   [2:0] idx_reg_346_pp0_iter6_reg;
reg   [31:0] array1_load_reg_361;
reg   [31:0] array2_load_reg_366;
wire   [0:0] and_ln12_fu_318_p2;
reg   [0:0] and_ln12_reg_371_pp0_iter8_reg;
reg   [0:0] and_ln12_reg_371_pp0_iter9_reg;
reg   [0:0] and_ln12_reg_371_pp0_iter10_reg;
reg   [0:0] and_ln12_reg_371_pp0_iter11_reg;
reg   [0:0] and_ln12_reg_371_pp0_iter12_reg;
reg   [2:0] ps_addr_1_reg_375;
reg   [2:0] ps_addr_1_reg_375_pp0_iter8_reg;
reg   [2:0] ps_addr_1_reg_375_pp0_iter9_reg;
reg   [2:0] ps_addr_1_reg_375_pp0_iter10_reg;
reg   [2:0] ps_addr_1_reg_375_pp0_iter11_reg;
reg   [2:0] ps_addr_1_reg_375_pp0_iter12_reg;
wire   [31:0] grp_fu_218_p2;
reg   [31:0] tmp_1_reg_381;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state45;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg   [2:0] ps_address0;
reg    ps_ce0;
reg    ps_we0;
reg   [2:0] ps_address1;
reg    ps_ce1;
reg    ps_we1;
reg   [2:0] phi_ln5_reg_192;
wire   [63:0] zext_ln5_fu_249_p1;
wire   [63:0] zext_ln11_fu_276_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln14_fu_324_p1;
reg   [31:0] grp_fu_214_p0;
reg   [31:0] grp_fu_214_p1;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state47;
wire   [31:0] bitcast_ln12_fu_282_p1;
wire   [7:0] tmp_fu_286_p4;
wire   [22:0] trunc_ln12_fu_296_p1;
wire   [0:0] icmp_ln12_1_fu_306_p2;
wire   [0:0] icmp_ln12_fu_300_p2;
wire   [0:0] or_ln12_fu_312_p2;
wire   [0:0] grp_fu_223_p2;
reg   [1:0] grp_fu_214_opcode;
wire    ap_block_pp0_stage0_00001;
wire    ap_CS_fsm_state50;
reg   [36:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 37'd1;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
end

kernel7_ps #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
ps_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ps_address0),
    .ce0(ps_ce0),
    .we0(ps_we0),
    .d0(32'd0),
    .q0(ps_q0),
    .address1(ps_address1),
    .ce1(ps_ce1),
    .we1(ps_we1),
    .d1(tmp_1_reg_381),
    .q1(ps_q1)
);

kernel7_faddfsub_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel7_faddfsub_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_214_p0),
    .din1(grp_fu_214_p1),
    .opcode(grp_fu_214_opcode),
    .ce(1'b1),
    .dout(grp_fu_214_p2)
);

kernel7_fadd_32nscud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel7_fadd_32nscud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_235),
    .din1(reg_228_pp0_iter8_reg),
    .ce(1'b1),
    .dout(grp_fu_218_p2)
);

kernel7_fcmp_32nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
kernel7_fcmp_32nsdEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_228),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_223_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln5_fu_254_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln5_fu_254_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter13 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln5_fu_254_p2 == 1'd1))) begin
        i_0_reg_203 <= 12'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln8_fu_260_p2 == 1'd0))) begin
        i_0_reg_203 <= i_fu_266_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln5_fu_254_p2 == 1'd0))) begin
        phi_ln5_reg_192 <= add_ln5_fu_243_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_ln5_reg_192 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state26))) begin
        reg_235 <= ps_q1;
    end else if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state22) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'd1 == and_ln12_reg_371)))) begin
        reg_235 <= ps_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln12_reg_371 <= and_ln12_fu_318_p2;
        and_ln12_reg_371_pp0_iter10_reg <= and_ln12_reg_371_pp0_iter9_reg;
        and_ln12_reg_371_pp0_iter11_reg <= and_ln12_reg_371_pp0_iter10_reg;
        and_ln12_reg_371_pp0_iter12_reg <= and_ln12_reg_371_pp0_iter11_reg;
        and_ln12_reg_371_pp0_iter8_reg <= and_ln12_reg_371;
        and_ln12_reg_371_pp0_iter9_reg <= and_ln12_reg_371_pp0_iter8_reg;
        idx_reg_346_pp0_iter2_reg <= idx_reg_346_pp0_iter1_reg;
        idx_reg_346_pp0_iter3_reg <= idx_reg_346_pp0_iter2_reg;
        idx_reg_346_pp0_iter4_reg <= idx_reg_346_pp0_iter3_reg;
        idx_reg_346_pp0_iter5_reg <= idx_reg_346_pp0_iter4_reg;
        idx_reg_346_pp0_iter6_reg <= idx_reg_346_pp0_iter5_reg;
        ps_addr_1_reg_375_pp0_iter10_reg <= ps_addr_1_reg_375_pp0_iter9_reg;
        ps_addr_1_reg_375_pp0_iter11_reg <= ps_addr_1_reg_375_pp0_iter10_reg;
        ps_addr_1_reg_375_pp0_iter12_reg <= ps_addr_1_reg_375_pp0_iter11_reg;
        ps_addr_1_reg_375_pp0_iter8_reg <= ps_addr_1_reg_375;
        ps_addr_1_reg_375_pp0_iter9_reg <= ps_addr_1_reg_375_pp0_iter8_reg;
        reg_228_pp0_iter6_reg <= reg_228;
        reg_228_pp0_iter7_reg <= reg_228_pp0_iter6_reg;
        reg_228_pp0_iter8_reg <= reg_228_pp0_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        array1_load_reg_361 <= array1_q0;
        array2_load_reg_366 <= array2_q0;
        idx_reg_346_pp0_iter1_reg <= idx_reg_346;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln8_fu_260_p2 == 1'd0))) begin
        idx_reg_346 <= idx_fu_272_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln12_fu_318_p2))) begin
        ps_addr_1_reg_375 <= zext_ln14_fu_324_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state22) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1)))) begin
        reg_228 <= grp_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln12_reg_371_pp0_iter11_reg))) begin
        tmp_1_reg_381 <= grp_fu_218_p2;
    end
end

always @ (*) begin
    if ((icmp_ln8_fu_260_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        array1_ce0 = 1'b1;
    end else begin
        array1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        array2_ce0 = 1'b1;
    end else begin
        array2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_00001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_fu_214_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_fu_214_opcode = 2'd0;
    end else begin
        grp_fu_214_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23))) begin
        grp_fu_214_p0 = reg_228;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_214_p0 = reg_235;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_fu_214_p0 = array1_load_reg_361;
    end else begin
        grp_fu_214_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23))) begin
        grp_fu_214_p1 = reg_235;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_214_p1 = 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_fu_214_p1 = array2_load_reg_366;
    end else begin
        grp_fu_214_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        ps_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        ps_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        ps_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        ps_address0 = 64'd1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        ps_address0 = zext_ln14_fu_324_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ps_address0 = zext_ln5_fu_249_p1;
    end else begin
        ps_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        ps_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        ps_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        ps_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        ps_address1 = 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter13 == 1'b1))) begin
        ps_address1 = ps_addr_1_reg_375_pp0_iter12_reg;
    end else begin
        ps_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1)))) begin
        ps_ce0 = 1'b1;
    end else begin
        ps_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state17) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter13 == 1'b1)))) begin
        ps_ce1 = 1'b1;
    end else begin
        ps_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ps_we0 = 1'b1;
    end else begin
        ps_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter13 == 1'b1) & (1'd1 == and_ln12_reg_371_pp0_iter12_reg))) begin
        ps_we1 = 1'b1;
    end else begin
        ps_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln5_fu_254_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln8_fu_260_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter12 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter13 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter12 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter13 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln8_fu_260_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln5_fu_243_p2 = (phi_ln5_reg_192 + 3'd1);

assign and_ln12_fu_318_p2 = (or_ln12_fu_312_p2 & grp_fu_223_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd36];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = grp_fu_214_p2;

assign array1_address0 = zext_ln11_fu_276_p1;

assign array2_address0 = zext_ln11_fu_276_p1;

assign bitcast_ln12_fu_282_p1 = reg_228_pp0_iter6_reg;

assign i_fu_266_p2 = (i_0_reg_203 + 12'd1);

assign icmp_ln12_1_fu_306_p2 = ((trunc_ln12_fu_296_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_300_p2 = ((tmp_fu_286_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln5_fu_254_p2 = ((phi_ln5_reg_192 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_260_p2 = ((i_0_reg_203 == 12'd2048) ? 1'b1 : 1'b0);

assign idx_fu_272_p1 = i_0_reg_203[2:0];

assign or_ln12_fu_312_p2 = (icmp_ln12_fu_300_p2 | icmp_ln12_1_fu_306_p2);

assign tmp_fu_286_p4 = {{bitcast_ln12_fu_282_p1[30:23]}};

assign trunc_ln12_fu_296_p1 = bitcast_ln12_fu_282_p1[22:0];

assign zext_ln11_fu_276_p1 = i_0_reg_203;

assign zext_ln14_fu_324_p1 = idx_reg_346_pp0_iter6_reg;

assign zext_ln5_fu_249_p1 = phi_ln5_reg_192;

endmodule //kernel7
