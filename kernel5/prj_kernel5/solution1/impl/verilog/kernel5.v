// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kernel5,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.943000,HLS_SYN_LAT=2055,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=606,HLS_SYN_LUT=568,HLS_VERSION=2019_1}" *)

module kernel5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        max,
        array1_address0,
        array1_ce0,
        array1_q0,
        array2_address0,
        array2_ce0,
        array2_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state9 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] max;
output  [10:0] array1_address0;
output   array1_ce0;
input  [31:0] array1_q0;
output  [10:0] array2_address0;
output   array2_ce0;
input  [31:0] array2_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg array1_ce0;
reg array2_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] sum_0_reg_88;
reg   [11:0] i_0_reg_100;
wire   [31:0] bitcast_ln10_1_fu_120_p1;
reg   [31:0] bitcast_ln10_1_reg_231;
wire   [0:0] icmp_ln10_3_fu_128_p2;
reg   [0:0] icmp_ln10_3_reg_236;
wire   [0:0] icmp_ln8_fu_134_p2;
reg   [0:0] icmp_ln8_reg_241;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln8_reg_241_pp0_iter1_reg;
reg   [0:0] icmp_ln8_reg_241_pp0_iter2_reg;
reg   [0:0] icmp_ln8_reg_241_pp0_iter3_reg;
reg   [0:0] icmp_ln8_reg_241_pp0_iter4_reg;
reg   [0:0] icmp_ln8_reg_241_pp0_iter5_reg;
wire   [11:0] i_fu_140_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln10_2_fu_155_p2;
reg   [0:0] icmp_ln10_2_reg_250;
reg   [0:0] icmp_ln10_2_reg_250_pp0_iter1_reg;
reg   [0:0] icmp_ln10_2_reg_250_pp0_iter2_reg;
reg   [0:0] icmp_ln10_2_reg_250_pp0_iter3_reg;
reg   [0:0] icmp_ln10_2_reg_250_pp0_iter4_reg;
reg   [0:0] icmp_ln10_2_reg_250_pp0_iter5_reg;
reg   [31:0] array1_load_reg_265;
reg   [31:0] array2_load_reg_270;
wire   [31:0] grp_fu_111_p2;
reg   [31:0] tmp_1_reg_275;
wire   [31:0] sum_fu_219_p3;
reg    ap_enable_reg_pp0_iter6;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg   [31:0] ap_phi_mux_sum_0_phi_fu_92_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln10_fu_161_p1;
wire   [22:0] trunc_ln10_fu_124_p1;
wire   [7:0] tmp_3_fu_146_p4;
wire   [31:0] bitcast_ln10_fu_167_p1;
wire   [7:0] tmp_fu_171_p4;
wire   [22:0] trunc_ln10_1_fu_181_p1;
wire   [0:0] icmp_ln10_1_fu_191_p2;
wire   [0:0] icmp_ln10_fu_185_p2;
wire   [0:0] or_ln10_fu_197_p2;
wire   [0:0] or_ln10_1_fu_203_p2;
wire   [0:0] and_ln10_fu_207_p2;
wire   [0:0] grp_fu_115_p2;
wire   [0:0] and_ln10_1_fu_213_p2;
wire    ap_block_pp0_stage0_00001;
wire    ap_CS_fsm_state9;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

kernel5_fadd_32nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel5_fadd_32nsbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(array1_load_reg_265),
    .din1(array2_load_reg_270),
    .ce(1'b1),
    .dout(grp_fu_111_p2)
);

kernel5_fcmp_32nscud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
kernel5_fcmp_32nscud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_sum_0_phi_fu_92_p4),
    .din1(max),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_115_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_fu_134_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_100 <= i_fu_140_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_100 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_reg_241_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        sum_0_reg_88 <= sum_fu_219_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sum_0_reg_88 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_241 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        array1_load_reg_265 <= array1_q0;
        array2_load_reg_270 <= array2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bitcast_ln10_1_reg_231 <= bitcast_ln10_1_fu_120_p1;
        icmp_ln10_3_reg_236 <= icmp_ln10_3_fu_128_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_fu_134_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln10_2_reg_250 <= icmp_ln10_2_fu_155_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln10_2_reg_250_pp0_iter1_reg <= icmp_ln10_2_reg_250;
        icmp_ln8_reg_241 <= icmp_ln8_fu_134_p2;
        icmp_ln8_reg_241_pp0_iter1_reg <= icmp_ln8_reg_241;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln10_2_reg_250_pp0_iter2_reg <= icmp_ln10_2_reg_250_pp0_iter1_reg;
        icmp_ln10_2_reg_250_pp0_iter3_reg <= icmp_ln10_2_reg_250_pp0_iter2_reg;
        icmp_ln10_2_reg_250_pp0_iter4_reg <= icmp_ln10_2_reg_250_pp0_iter3_reg;
        icmp_ln10_2_reg_250_pp0_iter5_reg <= icmp_ln10_2_reg_250_pp0_iter4_reg;
        icmp_ln8_reg_241_pp0_iter2_reg <= icmp_ln8_reg_241_pp0_iter1_reg;
        icmp_ln8_reg_241_pp0_iter3_reg <= icmp_ln8_reg_241_pp0_iter2_reg;
        icmp_ln8_reg_241_pp0_iter4_reg <= icmp_ln8_reg_241_pp0_iter3_reg;
        icmp_ln8_reg_241_pp0_iter5_reg <= icmp_ln8_reg_241_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_reg_241_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_1_reg_275 <= grp_fu_111_p2;
    end
end

always @ (*) begin
    if ((icmp_ln8_fu_134_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_reg_241_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_sum_0_phi_fu_92_p4 = sum_fu_219_p3;
    end else begin
        ap_phi_mux_sum_0_phi_fu_92_p4 = sum_0_reg_88;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        array1_ce0 = 1'b1;
    end else begin
        array1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        array2_ce0 = 1'b1;
    end else begin
        array2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln8_fu_134_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter6 == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln8_fu_134_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln10_1_fu_213_p2 = (grp_fu_115_p2 & and_ln10_fu_207_p2);

assign and_ln10_fu_207_p2 = (or_ln10_fu_197_p2 & or_ln10_1_fu_203_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = sum_0_reg_88;

assign array1_address0 = zext_ln10_fu_161_p1;

assign array2_address0 = zext_ln10_fu_161_p1;

assign bitcast_ln10_1_fu_120_p1 = max;

assign bitcast_ln10_fu_167_p1 = sum_0_reg_88;

assign i_fu_140_p2 = (i_0_reg_100 + 12'd1);

assign icmp_ln10_1_fu_191_p2 = ((trunc_ln10_1_fu_181_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln10_2_fu_155_p2 = ((tmp_3_fu_146_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln10_3_fu_128_p2 = ((trunc_ln10_fu_124_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln10_fu_185_p2 = ((tmp_fu_171_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_134_p2 = ((i_0_reg_100 == 12'd2048) ? 1'b1 : 1'b0);

assign or_ln10_1_fu_203_p2 = (icmp_ln10_3_reg_236 | icmp_ln10_2_reg_250_pp0_iter5_reg);

assign or_ln10_fu_197_p2 = (icmp_ln10_fu_185_p2 | icmp_ln10_1_fu_191_p2);

assign sum_fu_219_p3 = ((and_ln10_1_fu_213_p2[0:0] === 1'b1) ? tmp_1_reg_275 : sum_0_reg_88);

assign tmp_3_fu_146_p4 = {{bitcast_ln10_1_reg_231[30:23]}};

assign tmp_fu_171_p4 = {{bitcast_ln10_fu_167_p1[30:23]}};

assign trunc_ln10_1_fu_181_p1 = bitcast_ln10_fu_167_p1[22:0];

assign trunc_ln10_fu_124_p1 = bitcast_ln10_1_fu_120_p1[22:0];

assign zext_ln10_fu_161_p1 = i_0_reg_100;

endmodule //kernel5
