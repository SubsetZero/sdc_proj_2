// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "kernel5.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic kernel5::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic kernel5::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> kernel5::ap_ST_fsm_state1 = "1";
const sc_lv<3> kernel5::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> kernel5::ap_ST_fsm_state9 = "100";
const sc_lv<32> kernel5::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool kernel5::ap_const_boolean_1 = true;
const sc_lv<32> kernel5::ap_const_lv32_1 = "1";
const bool kernel5::ap_const_boolean_0 = false;
const sc_lv<1> kernel5::ap_const_lv1_0 = "0";
const sc_lv<1> kernel5::ap_const_lv1_1 = "1";
const sc_lv<12> kernel5::ap_const_lv12_0 = "000000000000";
const sc_lv<23> kernel5::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<12> kernel5::ap_const_lv12_800 = "100000000000";
const sc_lv<12> kernel5::ap_const_lv12_1 = "1";
const sc_lv<32> kernel5::ap_const_lv32_17 = "10111";
const sc_lv<32> kernel5::ap_const_lv32_1E = "11110";
const sc_lv<8> kernel5::ap_const_lv8_FF = "11111111";
const sc_lv<5> kernel5::ap_const_lv5_4 = "100";
const sc_lv<32> kernel5::ap_const_lv32_2 = "10";

kernel5::kernel5(sc_module_name name) : sc_module(name), mVcdFile(0) {
    kernel5_fadd_32nsbkb_U1 = new kernel5_fadd_32nsbkb<1,4,32,32,32>("kernel5_fadd_32nsbkb_U1");
    kernel5_fadd_32nsbkb_U1->clk(ap_clk);
    kernel5_fadd_32nsbkb_U1->reset(ap_rst);
    kernel5_fadd_32nsbkb_U1->din0(array1_load_reg_265);
    kernel5_fadd_32nsbkb_U1->din1(array2_load_reg_270);
    kernel5_fadd_32nsbkb_U1->ce(ap_var_for_const0);
    kernel5_fadd_32nsbkb_U1->dout(grp_fu_111_p2);
    kernel5_fcmp_32nscud_U2 = new kernel5_fcmp_32nscud<1,2,32,32,1>("kernel5_fcmp_32nscud_U2");
    kernel5_fcmp_32nscud_U2->clk(ap_clk);
    kernel5_fcmp_32nscud_U2->reset(ap_rst);
    kernel5_fcmp_32nscud_U2->din0(ap_phi_mux_sum_0_phi_fu_92_p4);
    kernel5_fcmp_32nscud_U2->din1(max);
    kernel5_fcmp_32nscud_U2->ce(ap_var_for_const0);
    kernel5_fcmp_32nscud_U2->opcode(ap_var_for_const1);
    kernel5_fcmp_32nscud_U2->dout(grp_fu_115_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_and_ln10_1_fu_213_p2);
    sensitive << ( and_ln10_fu_207_p2 );
    sensitive << ( grp_fu_115_p2 );

    SC_METHOD(thread_and_ln10_fu_207_p2);
    sensitive << ( or_ln10_fu_197_p2 );
    sensitive << ( or_ln10_1_fu_203_p2 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_00001);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter4);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter5);

    SC_METHOD(thread_ap_block_state8_pp0_stage0_iter6);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln8_fu_134_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );

    SC_METHOD(thread_ap_phi_mux_sum_0_phi_fu_92_p4);
    sensitive << ( sum_0_reg_88 );
    sensitive << ( icmp_ln8_reg_241_pp0_iter5_reg );
    sensitive << ( sum_fu_219_p3 );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_return);
    sensitive << ( sum_0_reg_88 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_array1_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln10_fu_161_p1 );

    SC_METHOD(thread_array1_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_array2_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln10_fu_161_p1 );

    SC_METHOD(thread_array2_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_bitcast_ln10_1_fu_120_p1);
    sensitive << ( max );

    SC_METHOD(thread_bitcast_ln10_fu_167_p1);
    sensitive << ( sum_0_reg_88 );

    SC_METHOD(thread_i_fu_140_p2);
    sensitive << ( i_0_reg_100 );

    SC_METHOD(thread_icmp_ln10_1_fu_191_p2);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( icmp_ln8_reg_241_pp0_iter5_reg );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( trunc_ln10_1_fu_181_p1 );

    SC_METHOD(thread_icmp_ln10_2_fu_155_p2);
    sensitive << ( icmp_ln8_fu_134_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_3_fu_146_p4 );

    SC_METHOD(thread_icmp_ln10_3_fu_128_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( trunc_ln10_fu_124_p1 );

    SC_METHOD(thread_icmp_ln10_fu_185_p2);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( icmp_ln8_reg_241_pp0_iter5_reg );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( tmp_fu_171_p4 );

    SC_METHOD(thread_icmp_ln8_fu_134_p2);
    sensitive << ( i_0_reg_100 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_or_ln10_1_fu_203_p2);
    sensitive << ( icmp_ln10_3_reg_236 );
    sensitive << ( icmp_ln10_2_reg_250_pp0_iter5_reg );

    SC_METHOD(thread_or_ln10_fu_197_p2);
    sensitive << ( icmp_ln10_1_fu_191_p2 );
    sensitive << ( icmp_ln10_fu_185_p2 );

    SC_METHOD(thread_sum_fu_219_p3);
    sensitive << ( sum_0_reg_88 );
    sensitive << ( tmp_1_reg_275 );
    sensitive << ( and_ln10_1_fu_213_p2 );

    SC_METHOD(thread_tmp_3_fu_146_p4);
    sensitive << ( bitcast_ln10_1_reg_231 );

    SC_METHOD(thread_tmp_fu_171_p4);
    sensitive << ( bitcast_ln10_fu_167_p1 );

    SC_METHOD(thread_trunc_ln10_1_fu_181_p1);
    sensitive << ( bitcast_ln10_fu_167_p1 );

    SC_METHOD(thread_trunc_ln10_fu_124_p1);
    sensitive << ( bitcast_ln10_1_fu_120_p1 );

    SC_METHOD(thread_zext_ln10_fu_161_p1);
    sensitive << ( i_0_reg_100 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln8_fu_134_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter5 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter6 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter5 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "kernel5_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, max, "(port)max");
    sc_trace(mVcdFile, array1_address0, "(port)array1_address0");
    sc_trace(mVcdFile, array1_ce0, "(port)array1_ce0");
    sc_trace(mVcdFile, array1_q0, "(port)array1_q0");
    sc_trace(mVcdFile, array2_address0, "(port)array2_address0");
    sc_trace(mVcdFile, array2_ce0, "(port)array2_ce0");
    sc_trace(mVcdFile, array2_q0, "(port)array2_q0");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, sum_0_reg_88, "sum_0_reg_88");
    sc_trace(mVcdFile, i_0_reg_100, "i_0_reg_100");
    sc_trace(mVcdFile, bitcast_ln10_1_fu_120_p1, "bitcast_ln10_1_fu_120_p1");
    sc_trace(mVcdFile, bitcast_ln10_1_reg_231, "bitcast_ln10_1_reg_231");
    sc_trace(mVcdFile, icmp_ln10_3_fu_128_p2, "icmp_ln10_3_fu_128_p2");
    sc_trace(mVcdFile, icmp_ln10_3_reg_236, "icmp_ln10_3_reg_236");
    sc_trace(mVcdFile, icmp_ln8_fu_134_p2, "icmp_ln8_fu_134_p2");
    sc_trace(mVcdFile, icmp_ln8_reg_241, "icmp_ln8_reg_241");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter3, "ap_block_state5_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter4, "ap_block_state6_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter5, "ap_block_state7_pp0_stage0_iter5");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage0_iter6, "ap_block_state8_pp0_stage0_iter6");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, icmp_ln8_reg_241_pp0_iter1_reg, "icmp_ln8_reg_241_pp0_iter1_reg");
    sc_trace(mVcdFile, icmp_ln8_reg_241_pp0_iter2_reg, "icmp_ln8_reg_241_pp0_iter2_reg");
    sc_trace(mVcdFile, icmp_ln8_reg_241_pp0_iter3_reg, "icmp_ln8_reg_241_pp0_iter3_reg");
    sc_trace(mVcdFile, icmp_ln8_reg_241_pp0_iter4_reg, "icmp_ln8_reg_241_pp0_iter4_reg");
    sc_trace(mVcdFile, icmp_ln8_reg_241_pp0_iter5_reg, "icmp_ln8_reg_241_pp0_iter5_reg");
    sc_trace(mVcdFile, i_fu_140_p2, "i_fu_140_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, icmp_ln10_2_fu_155_p2, "icmp_ln10_2_fu_155_p2");
    sc_trace(mVcdFile, icmp_ln10_2_reg_250, "icmp_ln10_2_reg_250");
    sc_trace(mVcdFile, icmp_ln10_2_reg_250_pp0_iter1_reg, "icmp_ln10_2_reg_250_pp0_iter1_reg");
    sc_trace(mVcdFile, icmp_ln10_2_reg_250_pp0_iter2_reg, "icmp_ln10_2_reg_250_pp0_iter2_reg");
    sc_trace(mVcdFile, icmp_ln10_2_reg_250_pp0_iter3_reg, "icmp_ln10_2_reg_250_pp0_iter3_reg");
    sc_trace(mVcdFile, icmp_ln10_2_reg_250_pp0_iter4_reg, "icmp_ln10_2_reg_250_pp0_iter4_reg");
    sc_trace(mVcdFile, icmp_ln10_2_reg_250_pp0_iter5_reg, "icmp_ln10_2_reg_250_pp0_iter5_reg");
    sc_trace(mVcdFile, array1_load_reg_265, "array1_load_reg_265");
    sc_trace(mVcdFile, array2_load_reg_270, "array2_load_reg_270");
    sc_trace(mVcdFile, grp_fu_111_p2, "grp_fu_111_p2");
    sc_trace(mVcdFile, tmp_1_reg_275, "tmp_1_reg_275");
    sc_trace(mVcdFile, sum_fu_219_p3, "sum_fu_219_p3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter6, "ap_enable_reg_pp0_iter6");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter5, "ap_enable_reg_pp0_iter5");
    sc_trace(mVcdFile, ap_phi_mux_sum_0_phi_fu_92_p4, "ap_phi_mux_sum_0_phi_fu_92_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, zext_ln10_fu_161_p1, "zext_ln10_fu_161_p1");
    sc_trace(mVcdFile, trunc_ln10_fu_124_p1, "trunc_ln10_fu_124_p1");
    sc_trace(mVcdFile, tmp_3_fu_146_p4, "tmp_3_fu_146_p4");
    sc_trace(mVcdFile, bitcast_ln10_fu_167_p1, "bitcast_ln10_fu_167_p1");
    sc_trace(mVcdFile, tmp_fu_171_p4, "tmp_fu_171_p4");
    sc_trace(mVcdFile, trunc_ln10_1_fu_181_p1, "trunc_ln10_1_fu_181_p1");
    sc_trace(mVcdFile, icmp_ln10_1_fu_191_p2, "icmp_ln10_1_fu_191_p2");
    sc_trace(mVcdFile, icmp_ln10_fu_185_p2, "icmp_ln10_fu_185_p2");
    sc_trace(mVcdFile, or_ln10_fu_197_p2, "or_ln10_fu_197_p2");
    sc_trace(mVcdFile, or_ln10_1_fu_203_p2, "or_ln10_1_fu_203_p2");
    sc_trace(mVcdFile, and_ln10_fu_207_p2, "and_ln10_fu_207_p2");
    sc_trace(mVcdFile, grp_fu_115_p2, "grp_fu_115_p2");
    sc_trace(mVcdFile, and_ln10_1_fu_213_p2, "and_ln10_1_fu_213_p2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_00001, "ap_block_pp0_stage0_00001");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("kernel5.hdltvin.dat");
    mHdltvoutHandle.open("kernel5.hdltvout.dat");
}

kernel5::~kernel5() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete kernel5_fadd_32nsbkb_U1;
    delete kernel5_fcmp_32nscud_U2;
}

void kernel5::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void kernel5::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv5_4;
}

void kernel5::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter5 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter5 = ap_enable_reg_pp0_iter4.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter6 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter6 = ap_enable_reg_pp0_iter5.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter6 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(icmp_ln8_fu_134_p2.read(), ap_const_lv1_0))) {
        i_0_reg_100 = i_fu_140_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_100 = ap_const_lv12_0;
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter6.read()) && 
         esl_seteq<1,1,1>(icmp_ln8_reg_241_pp0_iter5_reg.read(), ap_const_lv1_0))) {
        sum_0_reg_88 = sum_fu_219_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sum_0_reg_88 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln8_reg_241.read(), ap_const_lv1_0))) {
        array1_load_reg_265 = array1_q0.read();
        array2_load_reg_270 = array2_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        bitcast_ln10_1_reg_231 = bitcast_ln10_1_fu_120_p1.read();
        icmp_ln10_3_reg_236 = icmp_ln10_3_fu_128_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln8_fu_134_p2.read(), ap_const_lv1_0))) {
        icmp_ln10_2_reg_250 = icmp_ln10_2_fu_155_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln10_2_reg_250_pp0_iter1_reg = icmp_ln10_2_reg_250.read();
        icmp_ln8_reg_241 = icmp_ln8_fu_134_p2.read();
        icmp_ln8_reg_241_pp0_iter1_reg = icmp_ln8_reg_241.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
        icmp_ln10_2_reg_250_pp0_iter2_reg = icmp_ln10_2_reg_250_pp0_iter1_reg.read();
        icmp_ln10_2_reg_250_pp0_iter3_reg = icmp_ln10_2_reg_250_pp0_iter2_reg.read();
        icmp_ln10_2_reg_250_pp0_iter4_reg = icmp_ln10_2_reg_250_pp0_iter3_reg.read();
        icmp_ln10_2_reg_250_pp0_iter5_reg = icmp_ln10_2_reg_250_pp0_iter4_reg.read();
        icmp_ln8_reg_241_pp0_iter2_reg = icmp_ln8_reg_241_pp0_iter1_reg.read();
        icmp_ln8_reg_241_pp0_iter3_reg = icmp_ln8_reg_241_pp0_iter2_reg.read();
        icmp_ln8_reg_241_pp0_iter4_reg = icmp_ln8_reg_241_pp0_iter3_reg.read();
        icmp_ln8_reg_241_pp0_iter5_reg = icmp_ln8_reg_241_pp0_iter4_reg.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln8_reg_241_pp0_iter4_reg.read(), ap_const_lv1_0))) {
        tmp_1_reg_275 = grp_fu_111_p2.read();
    }
}

void kernel5::thread_and_ln10_1_fu_213_p2() {
    and_ln10_1_fu_213_p2 = (and_ln10_fu_207_p2.read() & grp_fu_115_p2.read());
}

void kernel5::thread_and_ln10_fu_207_p2() {
    and_ln10_fu_207_p2 = (or_ln10_fu_197_p2.read() & or_ln10_1_fu_203_p2.read());
}

void kernel5::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void kernel5::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void kernel5::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[2];
}

void kernel5::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel5::thread_ap_block_pp0_stage0_00001() {
    ap_block_pp0_stage0_00001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel5::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel5::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel5::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel5::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel5::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel5::thread_ap_block_state5_pp0_stage0_iter3() {
    ap_block_state5_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel5::thread_ap_block_state6_pp0_stage0_iter4() {
    ap_block_state6_pp0_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel5::thread_ap_block_state7_pp0_stage0_iter5() {
    ap_block_state7_pp0_stage0_iter5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel5::thread_ap_block_state8_pp0_stage0_iter6() {
    ap_block_state8_pp0_stage0_iter6 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel5::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(icmp_ln8_fu_134_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void kernel5::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void kernel5::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void kernel5::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void kernel5::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter6.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void kernel5::thread_ap_phi_mux_sum_0_phi_fu_92_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter6.read()) && 
         esl_seteq<1,1,1>(icmp_ln8_reg_241_pp0_iter5_reg.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_sum_0_phi_fu_92_p4 = sum_fu_219_p3.read();
    } else {
        ap_phi_mux_sum_0_phi_fu_92_p4 = sum_0_reg_88.read();
    }
}

void kernel5::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void kernel5::thread_ap_return() {
    ap_return = sum_0_reg_88.read();
}

void kernel5::thread_array1_address0() {
    array1_address0 =  (sc_lv<11>) (zext_ln10_fu_161_p1.read());
}

void kernel5::thread_array1_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        array1_ce0 = ap_const_logic_1;
    } else {
        array1_ce0 = ap_const_logic_0;
    }
}

void kernel5::thread_array2_address0() {
    array2_address0 =  (sc_lv<11>) (zext_ln10_fu_161_p1.read());
}

void kernel5::thread_array2_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        array2_ce0 = ap_const_logic_1;
    } else {
        array2_ce0 = ap_const_logic_0;
    }
}

void kernel5::thread_bitcast_ln10_1_fu_120_p1() {
    bitcast_ln10_1_fu_120_p1 = max.read();
}

void kernel5::thread_bitcast_ln10_fu_167_p1() {
    bitcast_ln10_fu_167_p1 = sum_0_reg_88.read();
}

void kernel5::thread_i_fu_140_p2() {
    i_fu_140_p2 = (!i_0_reg_100.read().is_01() || !ap_const_lv12_1.is_01())? sc_lv<12>(): (sc_biguint<12>(i_0_reg_100.read()) + sc_biguint<12>(ap_const_lv12_1));
}

void kernel5::thread_icmp_ln10_1_fu_191_p2() {
    icmp_ln10_1_fu_191_p2 = (!trunc_ln10_1_fu_181_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln10_1_fu_181_p1.read() == ap_const_lv23_0);
}

void kernel5::thread_icmp_ln10_2_fu_155_p2() {
    icmp_ln10_2_fu_155_p2 = (!tmp_3_fu_146_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_3_fu_146_p4.read() != ap_const_lv8_FF);
}

void kernel5::thread_icmp_ln10_3_fu_128_p2() {
    icmp_ln10_3_fu_128_p2 = (!trunc_ln10_fu_124_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln10_fu_124_p1.read() == ap_const_lv23_0);
}

void kernel5::thread_icmp_ln10_fu_185_p2() {
    icmp_ln10_fu_185_p2 = (!tmp_fu_171_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_171_p4.read() != ap_const_lv8_FF);
}

void kernel5::thread_icmp_ln8_fu_134_p2() {
    icmp_ln8_fu_134_p2 = (!i_0_reg_100.read().is_01() || !ap_const_lv12_800.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_100.read() == ap_const_lv12_800);
}

void kernel5::thread_or_ln10_1_fu_203_p2() {
    or_ln10_1_fu_203_p2 = (icmp_ln10_3_reg_236.read() | icmp_ln10_2_reg_250_pp0_iter5_reg.read());
}

void kernel5::thread_or_ln10_fu_197_p2() {
    or_ln10_fu_197_p2 = (icmp_ln10_1_fu_191_p2.read() | icmp_ln10_fu_185_p2.read());
}

void kernel5::thread_sum_fu_219_p3() {
    sum_fu_219_p3 = (!and_ln10_1_fu_213_p2.read()[0].is_01())? sc_lv<32>(): ((and_ln10_1_fu_213_p2.read()[0].to_bool())? tmp_1_reg_275.read(): sum_0_reg_88.read());
}

void kernel5::thread_tmp_3_fu_146_p4() {
    tmp_3_fu_146_p4 = bitcast_ln10_1_reg_231.read().range(30, 23);
}

void kernel5::thread_tmp_fu_171_p4() {
    tmp_fu_171_p4 = bitcast_ln10_fu_167_p1.read().range(30, 23);
}

void kernel5::thread_trunc_ln10_1_fu_181_p1() {
    trunc_ln10_1_fu_181_p1 = bitcast_ln10_fu_167_p1.read().range(23-1, 0);
}

void kernel5::thread_trunc_ln10_fu_124_p1() {
    trunc_ln10_fu_124_p1 = bitcast_ln10_1_fu_120_p1.read().range(23-1, 0);
}

void kernel5::thread_zext_ln10_fu_161_p1() {
    zext_ln10_fu_161_p1 = esl_zext<64,12>(i_0_reg_100.read());
}

void kernel5::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter6.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter5.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln8_fu_134_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter6.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter5.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(icmp_ln8_fu_134_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void kernel5::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"max\" :  \"" << max.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array1_address0\" :  \"" << array1_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array1_ce0\" :  \"" << array1_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"array1_q0\" :  \"" << array1_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array2_address0\" :  \"" << array2_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array2_ce0\" :  \"" << array2_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"array2_q0\" :  \"" << array2_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

