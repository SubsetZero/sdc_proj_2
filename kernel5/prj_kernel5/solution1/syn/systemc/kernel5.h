// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _kernel5_HH_
#define _kernel5_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "kernel5_fadd_32nsbkb.h"
#include "kernel5_fcmp_32nscud.h"

namespace ap_rtl {

struct kernel5 : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > max;
    sc_out< sc_lv<11> > array1_address0;
    sc_out< sc_logic > array1_ce0;
    sc_in< sc_lv<32> > array1_q0;
    sc_out< sc_lv<11> > array2_address0;
    sc_out< sc_logic > array2_ce0;
    sc_in< sc_lv<32> > array2_q0;
    sc_out< sc_lv<32> > ap_return;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<5> > ap_var_for_const1;


    // Module declarations
    kernel5(sc_module_name name);
    SC_HAS_PROCESS(kernel5);

    ~kernel5();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    kernel5_fadd_32nsbkb<1,4,32,32,32>* kernel5_fadd_32nsbkb_U1;
    kernel5_fcmp_32nscud<1,2,32,32,1>* kernel5_fcmp_32nscud_U2;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > sum_0_reg_88;
    sc_signal< sc_lv<12> > i_0_reg_100;
    sc_signal< sc_lv<32> > bitcast_ln10_1_fu_120_p1;
    sc_signal< sc_lv<32> > bitcast_ln10_1_reg_231;
    sc_signal< sc_lv<1> > icmp_ln10_3_fu_128_p2;
    sc_signal< sc_lv<1> > icmp_ln10_3_reg_236;
    sc_signal< sc_lv<1> > icmp_ln8_fu_134_p2;
    sc_signal< sc_lv<1> > icmp_ln8_reg_241;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter6;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln8_reg_241_pp0_iter1_reg;
    sc_signal< sc_lv<1> > icmp_ln8_reg_241_pp0_iter2_reg;
    sc_signal< sc_lv<1> > icmp_ln8_reg_241_pp0_iter3_reg;
    sc_signal< sc_lv<1> > icmp_ln8_reg_241_pp0_iter4_reg;
    sc_signal< sc_lv<1> > icmp_ln8_reg_241_pp0_iter5_reg;
    sc_signal< sc_lv<12> > i_fu_140_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > icmp_ln10_2_fu_155_p2;
    sc_signal< sc_lv<1> > icmp_ln10_2_reg_250;
    sc_signal< sc_lv<1> > icmp_ln10_2_reg_250_pp0_iter1_reg;
    sc_signal< sc_lv<1> > icmp_ln10_2_reg_250_pp0_iter2_reg;
    sc_signal< sc_lv<1> > icmp_ln10_2_reg_250_pp0_iter3_reg;
    sc_signal< sc_lv<1> > icmp_ln10_2_reg_250_pp0_iter4_reg;
    sc_signal< sc_lv<1> > icmp_ln10_2_reg_250_pp0_iter5_reg;
    sc_signal< sc_lv<32> > array1_load_reg_265;
    sc_signal< sc_lv<32> > array2_load_reg_270;
    sc_signal< sc_lv<32> > grp_fu_111_p2;
    sc_signal< sc_lv<32> > tmp_1_reg_275;
    sc_signal< sc_lv<32> > sum_fu_219_p3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_lv<32> > ap_phi_mux_sum_0_phi_fu_92_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > zext_ln10_fu_161_p1;
    sc_signal< sc_lv<23> > trunc_ln10_fu_124_p1;
    sc_signal< sc_lv<8> > tmp_3_fu_146_p4;
    sc_signal< sc_lv<32> > bitcast_ln10_fu_167_p1;
    sc_signal< sc_lv<8> > tmp_fu_171_p4;
    sc_signal< sc_lv<23> > trunc_ln10_1_fu_181_p1;
    sc_signal< sc_lv<1> > icmp_ln10_1_fu_191_p2;
    sc_signal< sc_lv<1> > icmp_ln10_fu_185_p2;
    sc_signal< sc_lv<1> > or_ln10_fu_197_p2;
    sc_signal< sc_lv<1> > or_ln10_1_fu_203_p2;
    sc_signal< sc_lv<1> > and_ln10_fu_207_p2;
    sc_signal< sc_lv<1> > grp_fu_115_p2;
    sc_signal< sc_lv<1> > and_ln10_1_fu_213_p2;
    sc_signal< bool > ap_block_pp0_stage0_00001;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state9;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<12> ap_const_lv12_800;
    static const sc_lv<12> ap_const_lv12_1;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<5> ap_const_lv5_4;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_clk_no_reset_();
    void thread_and_ln10_1_fu_213_p2();
    void thread_and_ln10_fu_207_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_00001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_block_state7_pp0_stage0_iter5();
    void thread_ap_block_state8_pp0_stage0_iter6();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_sum_0_phi_fu_92_p4();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_array1_address0();
    void thread_array1_ce0();
    void thread_array2_address0();
    void thread_array2_ce0();
    void thread_bitcast_ln10_1_fu_120_p1();
    void thread_bitcast_ln10_fu_167_p1();
    void thread_i_fu_140_p2();
    void thread_icmp_ln10_1_fu_191_p2();
    void thread_icmp_ln10_2_fu_155_p2();
    void thread_icmp_ln10_3_fu_128_p2();
    void thread_icmp_ln10_fu_185_p2();
    void thread_icmp_ln8_fu_134_p2();
    void thread_or_ln10_1_fu_203_p2();
    void thread_or_ln10_fu_197_p2();
    void thread_sum_fu_219_p3();
    void thread_tmp_3_fu_146_p4();
    void thread_tmp_fu_171_p4();
    void thread_trunc_ln10_1_fu_181_p1();
    void thread_trunc_ln10_fu_124_p1();
    void thread_zext_ln10_fu_161_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
