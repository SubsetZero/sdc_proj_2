// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _kernel6_HH_
#define _kernel6_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct kernel6 : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<11> > region_start_address0;
    sc_out< sc_logic > region_start_ce0;
    sc_in< sc_lv<32> > region_start_q0;
    sc_out< sc_lv<11> > region_len_address0;
    sc_out< sc_logic > region_len_ce0;
    sc_in< sc_lv<32> > region_len_q0;
    sc_out< sc_lv<11> > index_dst_address0;
    sc_out< sc_logic > index_dst_ce0;
    sc_in< sc_lv<32> > index_dst_q0;
    sc_out< sc_lv<12> > results_address0;
    sc_out< sc_logic > results_ce0;
    sc_out< sc_logic > results_we0;
    sc_out< sc_lv<32> > results_d0;
    sc_in< sc_lv<32> > results_q0;


    // Module declarations
    kernel6(sc_module_name name);
    SC_HAS_PROCESS(kernel6);

    ~kernel6();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > sum_0_reg_125;
    sc_signal< sc_lv<31> > j_0_reg_138;
    sc_signal< sc_lv<12> > i_fu_155_p2;
    sc_signal< sc_lv<12> > i_reg_206;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln4_fu_149_p2;
    sc_signal< sc_lv<32> > start_reg_226;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > len_reg_231;
    sc_signal< sc_lv<32> > dst_reg_236;
    sc_signal< sc_lv<1> > icmp_ln11_fu_172_p2;
    sc_signal< sc_lv<1> > icmp_ln11_reg_241;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<31> > j_fu_177_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > sum_fu_193_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state4;
    sc_signal< sc_lv<12> > i_0_reg_114;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > zext_ln6_fu_161_p1;
    sc_signal< sc_lv<64> > sext_ln15_fu_188_p1;
    sc_signal< sc_lv<64> > sext_ln17_fu_199_p1;
    sc_signal< sc_lv<32> > zext_ln11_fu_168_p1;
    sc_signal< sc_lv<32> > add_ln15_fu_183_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_pp0_stage0;
    static const sc_lv<5> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<12> ap_const_lv12_800;
    static const sc_lv<12> ap_const_lv12_1;
    static const sc_lv<31> ap_const_lv31_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln15_fu_183_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state4_pp0_stage0_iter0();
    void thread_ap_block_state5_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state4();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_i_fu_155_p2();
    void thread_icmp_ln11_fu_172_p2();
    void thread_icmp_ln4_fu_149_p2();
    void thread_index_dst_address0();
    void thread_index_dst_ce0();
    void thread_j_fu_177_p2();
    void thread_region_len_address0();
    void thread_region_len_ce0();
    void thread_region_start_address0();
    void thread_region_start_ce0();
    void thread_results_address0();
    void thread_results_ce0();
    void thread_results_d0();
    void thread_results_we0();
    void thread_sext_ln15_fu_188_p1();
    void thread_sext_ln17_fu_199_p1();
    void thread_sum_fu_193_p2();
    void thread_zext_ln11_fu_168_p1();
    void thread_zext_ln6_fu_161_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
