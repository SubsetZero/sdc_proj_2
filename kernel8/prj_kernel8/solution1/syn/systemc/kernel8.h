// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _kernel8_HH_
#define _kernel8_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct kernel8 : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<11> > a_address0;
    sc_out< sc_logic > a_ce0;
    sc_out< sc_logic > a_we0;
    sc_out< sc_lv<32> > a_d0;
    sc_in< sc_lv<32> > a_q0;
    sc_in< sc_lv<32> > factor;
    sc_in< sc_lv<32> > offset;


    // Module declarations
    kernel8(sc_module_name name);
    SC_HAS_PROCESS(kernel8);

    ~kernel8();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > sub_ln5_fu_93_p2;
    sc_signal< sc_lv<32> > sub_ln5_reg_153;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln5_fu_103_p2;
    sc_signal< sc_lv<32> > a_load_reg_166;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > mul_ln9_fu_128_p2;
    sc_signal< sc_lv<32> > mul_ln9_reg_171;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<31> > i_fu_137_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<31> > i_0_reg_81;
    sc_signal< sc_lv<64> > sext_ln9_fu_123_p1;
    sc_signal< sc_lv<64> > zext_ln9_fu_132_p1;
    sc_signal< sc_lv<32> > zext_ln5_fu_99_p1;
    sc_signal< sc_lv<31> > add_ln9_fu_108_p2;
    sc_signal< sc_lv<32> > zext_ln9_1_fu_114_p1;
    sc_signal< sc_lv<32> > add_ln9_1_fu_118_p2;
    sc_signal< sc_lv<32> > mul_ln9_fu_128_p1;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<31> ap_const_lv31_6;
    static const sc_lv<32> ap_const_lv32_7FF;
    static const sc_lv<31> ap_const_lv31_7FFFFFFA;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<32> ap_const_lv32_5;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_a_address0();
    void thread_a_ce0();
    void thread_a_d0();
    void thread_a_we0();
    void thread_add_ln9_1_fu_118_p2();
    void thread_add_ln9_fu_108_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_fu_137_p2();
    void thread_icmp_ln5_fu_103_p2();
    void thread_mul_ln9_fu_128_p1();
    void thread_mul_ln9_fu_128_p2();
    void thread_sext_ln9_fu_123_p1();
    void thread_sub_ln5_fu_93_p2();
    void thread_zext_ln5_fu_99_p1();
    void thread_zext_ln9_1_fu_114_p1();
    void thread_zext_ln9_fu_132_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
